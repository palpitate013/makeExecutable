#!/usr/bin/env python3

import os
import sys
import requests
import stat
import shutil
import json
import subprocess
import argparse

SCRIPT_VERSION = "1.0.7"
REMOTE_SCRIPT_URL = "https://raw.githubusercontent.com/palpitate013/makeExecutable/refs/heads/main/makeExecutable"
SCRIPT_PATH = "/usr/local/bin/makeExecutable"

JSON_DIR = os.path.join(os.path.expanduser("~"), ".config", "makeExecutable")
JSON_FILE = os.path.join(JSON_DIR, "executables.json")

def remove_executable(executable_name):
    """Remove the executable and its startup entry."""
    target_path = os.path.join("/usr/local/bin", executable_name)

    # Remove the executable file
    if os.path.exists(target_path):
        try:
            os.remove(target_path)
            print(f"'{executable_name}' has been removed from '/usr/local/bin'.")
        except PermissionError:
            print(f"Error: Permission denied when removing '{executable_name}'. Try running with sudo.")
        except Exception as e:
            print(f"An error occurred while removing '{executable_name}': {e}")
    else:
        print(f"Error: The executable '{executable_name}' does not exist in '/usr/local/bin'.")

    # Remove from crontab if it was added for startup
    try:
        crontab_output = subprocess.check_output(['sudo', 'crontab', '-l'], stderr=subprocess.STDOUT).decode('utf-8')

        # Check if the @reboot entry exists for the executable
        if f"@reboot /usr/local/bin/{executable_name}" in crontab_output:
            # Remove the @reboot entry
            crontab_output = crontab_output.replace(f"@reboot /usr/local/bin/{executable_name}\n", "")
            # Apply the modified crontab
            subprocess.run(['sudo', 'crontab', '-'], input=crontab_output, text=True)
            print(f"Removed '{executable_name}' from crontab for startup.")
        else:
            print(f"'{executable_name}' is not listed in crontab for startup.")
    except subprocess.CalledProcessError as e:
        print(f"Error reading or writing to crontab: {e}")
    except Exception as e:
        print(f"An unexpected error occurred while modifying crontab: {e}")

def check_for_updates():
    """Check if there's a new version of the script available and update if needed."""
    try:
        response = requests.get(REMOTE_SCRIPT_URL)
        response.raise_for_status()
        remote_script = response.text

        if SCRIPT_VERSION in remote_script:
            print("You already have the latest version.")
            return

        print("New version found! Updating script...")
        with open(SCRIPT_PATH, "w") as script_file:
            script_file.write(remote_script)

        os.chmod(SCRIPT_PATH, 0o755)  # Ensure the script remains executable
        print("Update complete! Restart the script.")

    except requests.RequestException as e:
        print(f"Failed to check for updates: {e}")

if "--update" in sys.argv:
    check_for_updates()
    sys.exit(0)

def add_to_crontab(executable_name):
    """Add the executable to the crontab if it's not already there."""
    try:
        crontab_output = subprocess.check_output(['sudo', 'crontab', '-l'], stderr=subprocess.STDOUT).decode('utf-8')

        # Check if the @reboot entry already exists
        if f"@reboot /usr/local/bin/{executable_name}" not in crontab_output:
            crontab_output += f"\n@reboot /usr/local/bin/{executable_name}\n"
            subprocess.run(['sudo', 'crontab', '-'], input=crontab_output, text=True)
            print(f"Added '{executable_name}' to crontab for startup.")
        else:
            print(f"'{executable_name}' is already in crontab.")
    except subprocess.CalledProcessError:
        print(f"Crontab is empty. Adding '{executable_name}' to startup.")
        subprocess.run(['sudo', 'crontab', '-'], input=f"@reboot /usr/local/bin/{executable_name}\n", text=True)

def make_executable(file_path, executable_name):
    """
    Modify file permissions to make the specified file executable,
    add the shebang if necessary, and create a command for it.

    :param file_path: Path to the file to make executable
    :param executable_name: The name of the command for the executable
    """
    if not os.path.exists(file_path):
        print(f"Error: The file '{file_path}' does not exist.")
        return

    # Ensure the shebang is added if the file is a Python script
    if file_path.endswith(".py"):
        with open(file_path, "r") as f:
            lines = f.readlines()

        if not lines[0].startswith("#!"):
            lines.insert(0, "#!/usr/bin/env python3\n")

        with open(file_path, "w") as f:
            f.writelines(lines)
        print(f"Added shebang to {file_path}")

    current_permissions = os.stat(file_path).st_mode
    new_permissions = current_permissions | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH
    os.chmod(file_path, new_permissions)

    target_dir = "/usr/local/bin"
    target_path = os.path.join(target_dir, executable_name)

    try:
        shutil.copy(file_path, target_path)
        os.chmod(target_path, new_permissions)
        print(f"'{file_path}' is now executable and available as '{executable_name}' in '{target_dir}'.")

        save_executable_command(executable_name, target_path)

        # Add to crontab for startup if requested
        if "--start" in sys.argv:
            add_to_crontab(executable_name)

    except PermissionError:
        print(f"Error: You don't have permission to write to '{target_dir}'. Try running with sudo.")
    except Exception as e:
        print(f"An error occurred: {e}")

def save_executable_command(executable_name, target_path):
    """Save the executable command to a JSON file in a custom directory."""
    os.makedirs(JSON_DIR, exist_ok=True)
    executables = {}

    if os.path.exists(JSON_FILE):
        with open(JSON_FILE, "r") as f:
            try:
                executables = json.load(f)
            except json.JSONDecodeError:
                pass

    executables[executable_name] = target_path

    with open(JSON_FILE, "w") as f:
        json.dump(executables, f, indent=4)

    print(f"Saved executable '{executable_name}' to '{JSON_FILE}'.")

def add_to_startup(file_path):
    """Add the executable to system startup using crontab (for Linux)."""
    # Check if cron already has an entry for the script
    try:
        cron_tab = subprocess.check_output(["crontab", "-l"]).decode()
    except subprocess.CalledProcessError:
        cron_tab = ""

    # The @reboot line will make the file run on system boot
    cron_entry = f"@reboot {file_path}\n"

    if cron_entry not in cron_tab:
        with open("/tmp/crontab", "w") as f:
            f.write(cron_tab + cron_entry)
        subprocess.run(["crontab", "/tmp/crontab"])
        os.remove("/tmp/crontab")
        print(f"Added '{file_path}' to system startup.")
    else:
        print(f"'{file_path}' is already in the startup list.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Make a script executable and optionally add it to startup.")
    parser.add_argument("file_path", nargs="?", help="Path to the file to make executable")
    parser.add_argument("executable_name", nargs="?", help="The name of the executable command")
    parser.add_argument("--remove", metavar="executable", help="Remove an existing executable")
    parser.add_argument("--start", action="store_true", help="Add executable to system startup")

    args = parser.parse_args()

    if args.remove:
        remove_executable(args.remove)
    elif args.file_path and args.executable_name:
        make_executable(args.file_path, args.executable_name)
        if args.start:
            add_to_startup(args.executable_name)
    else:
        parser.print_help()
